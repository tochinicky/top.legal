service: serverless-rest-api-with-dynamodb

useDotenv: true
provider:
  name: aws
  stage: dev
  region: local
  runtime: nodejs16.x
  environment:
       CONTRACT_TABLE: ${env:CONTRACT_TABLE} # contract management table env,
       USERS_TABLE: ${env:USERS_TABLE} #Users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONTRACT_TABLE}"
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true # create tables on start  
functions:
  app:
    handler: index.handler
    events:
      - http:
          method: ANY
          path: '/'
      - http:
          method: ANY
          path: '/{proxy+}'
resources:
  Resources:
    ContractManagementDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:CONTRACT_TABLE} # contract management table
        AttributeDefinitions:
          -
            AttributeName: ContractID
            AttributeType: S
        KeySchema:
          -
            AttributeName: "ContractID"
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:USERS_TABLE}  # users table
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: "email"
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        